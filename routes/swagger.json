{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample timecards. You can find out more about  employees time management in our website at https://thetheartafarshadi.com/",
    "version": "1.0.0",
    "title": "Time management tool",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "artafarshadi1996@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "api.thetheartafarshadi.com",
  "basePath": "COMP351/API/V1",
  "tags": [
    {
      "name": "employees",
      "description": "Every thing about employees",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://thetheartafarshadi.com"
      }
    },
    {
      "name": "departments",
      "description": "Every thing about departments",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://thetheartafarshadi.com"
      }
    },
    {
      "name": "timecard",
      "description": "Every thing about timecard",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://thetheartafarshadi.com"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/employees/add": {
      "post": {
        "tags": [
          "employees"
        ],
        "summary": "Hiring new employee",
        "description": "",
        "operationId": "addEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Employees object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employees"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/employees/{employeeId}": {
      "put": {
        "tags": [
          "employees"
        ],
        "summary": "Update an existing employees",
        "description": "",
        "operationId": "updateemployees",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "employees object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employees"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "employees"
        ],
        "summary": "Delete employee record by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "get": {
        "tags": [
          "employees"
        ],
        "summary": "Find employee by ID",
        "description": "Returns a single employee",
        "operationId": "getemployeeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/employeesresponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "employee not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/employees/{employeeId}/timecard": {
      "post": {
        "tags": [
          "timecard"
        ],
        "summary": "Get working hours for employee",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "employee Id to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "employees object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/timecardrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/timecardresponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/departments/add": {
      "post": {
        "tags": [
          "departments"
        ],
        "summary": "creating new department",
        "description": "",
        "operationId": "adddepartment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "departments object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/departments"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/departments/{departmentId}": {
      "put": {
        "tags": [
          "departments"
        ],
        "summary": "Update an existing departments",
        "description": "",
        "operationId": "updatedepartments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentId",
            "in": "path",
            "description": "ID of departments to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "departments object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/departments"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "departments"
        ],
        "summary": "Delete department record by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "get": {
        "tags": [
          "departments"
        ],
        "summary": "Find department by ID",
        "description": "Returns a single employee",
        "operationId": "getdepartmentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentId",
            "in": "path",
            "description": "department id to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/timecards": {
      "post": {
        "tags": [
          "timecards"
        ],
        "summary": "creating new timecard",
        "description": "",
        "operationId": "addtimecard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "timecards object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/timecards"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/timecards/{timecardId}": {
      "delete": {
        "tags": [
          "timecards"
        ],
        "summary": "Delete timecards ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timecardId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "employees": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "employeesresponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/employees"
      }
    },
    "departments": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "timecardrequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string"
        },
        "end": {
          "type": "string"
        }
      }
    },
    "timecardresponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/timecards"
          }
        },
        "total": {
          "type": "number"
        }
      }
    },
    "timecards": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "employeesid": {
          "type": "integer"
        },
        "hours": {
          "type": "number"
        },
        "departmentid": {
          "type": "integer"
        },
        "date": {
          "type": "string"
        }
      }
    }
  }
}